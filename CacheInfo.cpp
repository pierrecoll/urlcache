//////////////////////////////////////////////////////////////////////
// Classe : CCacheInfo
// Resume : Cache Entry Info
//////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "CacheInfo.h"

//////////////////////////////////////////////////////////////////////
// Methode : CCacheInfo
// Resume : Constructeur
// In : None
// Out : None
//////////////////////////////////////////////////////////////////////
CCacheInfo::CCacheInfo()
{
	m_pCacheInfo = NULL;
	m_dwSize = 0;
}
//////////////////////////////////////////////////////////////////////
// Methode : ~CCacheInfo
// Resume : Destructor
// In : None
// Out : None
//////////////////////////////////////////////////////////////////////
CCacheInfo::~CCacheInfo()
{
	ClearMem();
}
//////////////////////////////////////////////////////////////////////
// Methode : Allocate
// Resume : Allocate 
// In : int nSize = Size of the entry
// Out : None
//////////////////////////////////////////////////////////////////////
void CCacheInfo::Allocate(int nSize)
{
	// Clear memory 
	ClearMem();

	// Init members
	m_dwSize = nSize;
	m_pCacheInfo = (LPINTERNET_CACHE_ENTRY_INFO)new BYTE[m_dwSize];

	// Init memory
	InitMemory();
}
//////////////////////////////////////////////////////////////////////
// Methode : ClearMem
// Resume : Clear Memory
// In : None
// Out : None
//////////////////////////////////////////////////////////////////////
void CCacheInfo::ClearMem()
{
	if(m_pCacheInfo)
	{
		delete [] m_pCacheInfo;
		m_pCacheInfo = NULL;
		m_dwSize = 0;
	}
}
//////////////////////////////////////////////////////////////////////
// Methode : InitMemory
// Resume : Init Memory
// In : None
// Out : None
//////////////////////////////////////////////////////////////////////
void CCacheInfo::InitMemory()
{
	if(m_pCacheInfo && m_dwSize)
	{
		memset(m_pCacheInfo, 0, m_dwSize);
	}
}
LPINTERNET_CACHE_ENTRY_INFO CCacheInfo::GetInfo()
{
	return m_pCacheInfo;
}
//////////////////////////////////////////////////////////////////////
// Methode : GetSize
// Resume : Return Size
// In : None
// Out : Size
//////////////////////////////////////////////////////////////////////
DWORD CCacheInfo::GetSize()
{
	return m_dwSize;
}
